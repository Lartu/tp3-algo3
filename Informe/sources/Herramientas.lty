(pagebreak)

*****2. Herramientas y equipo*****

****2.1. Equipo utilizado****
(par)
    Las mediciones presentadas en los experimentos que se presentarán en las próximas secciones fueron llevadas a cabo en un equipo que consta de las siguientes prestaciones: procesador AMD FX-6300 a 3.6GHz, 8.14 GB de memoria RAM y sistema operativo OpenSUSE Leap 15.0.
(par)

****2.2. Generador de clusters****

(rightblock)
(img)generador_datasets.png(img)
(caption)Generador de datasets propio(caption)
(rightblock)

(par)
Los datasets que utilizaremos para testear y analizar los heurísticas basdas en clustering (sobre las cuales hablaremos en la **sección 3.3**) fueron generadas utilizando un generador propio de datasets, diseñado para poder diseñar instancias a mano. El mismo se encuentra en el directorio ``Generador_Datasets_Cluster``. Para ejecutarlo se debe abrir con un navegador web el archivo ``generador.html``. Para usarlo no hace falta más que hacer click en el lugar donde se quiera colocar un punto. La coordenada del punto será añadida al área de texto debajo del gráfico, que luego podrá ser copiada a un archivo de texto, parseada, reestructurada conforme al estándar especificado por la TSPLib y provista al ejecutable del trabajo práctico por ``stdin``.
(par)

****2.3. Generador de instancias****

(par)
    Para poder evaluar nuestros algoritmos más allá de los casos de test provistos por la cátedra, en lo que llamamos __instancias desconocidas__, es decir, instancias de las cuales no se sabe nada (y por tanto, confiamos en que representan un caso genérico en el que se desee resolver un problema aplicando lógica de CVRP) hemos diseñado un generador de instancias aleatorias. Dados tres valores __n__, __m__ y __c__, el generador produce una serie de instancias de __[3, n]__ puntos, __m__ por cada __n__, con capacidad __c__ para los camiones. En nuestros experimentos hemos decidido medir utilizando __n = 200__, __m = 1000__ y __c__ aleatorio entre 70 y 150. Los puntos de las instancias aleatorias, como su nombre indica, se encuentran distribuidos de forma aleatoria sobre un espacio bidimencional y se adaptan al estándar TSPLib, con lo cual pueden ser alimentadas a nuestro trabajo práctico directamente por ``stdin``.
(par)
